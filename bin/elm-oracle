#!/usr/bin/env node
'use strict';

var fs = require('fs');
var path = require('path');
var process = require('process');
var elm = require('../elm.js');


// Usage and flags
if (process.argv.length != 4) {
    console.log("elm-oracle 2.0.0\n\nUsage: elm-oracle FILE query\nQuery for information about a token in an Elm file.\n\nAvailable options:\n  -h,--help                    Show this help text.");
    process.exit(1);
}

// Start elm app
var app = elm.Main.worker({
    file: loadFile(process.argv[2]),
    query: process.argv[3]
});

app.ports.output.subscribe(function(output) {
    console.log(output);
});

// Load modules
var modules = loadPackage(".");

var exactDependencies = JSON.parse(loadFile("elm-stuff/exact-dependencies.json"));
for (var key in exactDependencies) {
    var val = exactDependencies[key];
    modules = modules.concat(loadPackage(path.join("elm-stuff", "packages", key, val)));
}

modules.forEach(function(module) {
    app.ports.modules.send(loadFile(module));
});

// Utility functions
function loadPackage(dir) {
    var modules = [];
    var file = path.normalize(path.join(dir, "elm-package.json"));
    var elmPackage = JSON.parse(loadFile(file));
    var sourceDirectories = elmPackage["source-directories"];
    for (var i = 0; i < sourceDirectories.length; i++) {
        modules = modules.concat(walk(path.join(dir, sourceDirectories[i])));
    }
    return modules;
}

function walk(dir) {
    var results = [];
    var list = fs.readdirSync(dir, 'utf8');
    list.forEach(function(file) {
        var filepath = path.join(dir, file);
        var stat = fs.statSync(filepath);
        if (stat && stat.isDirectory() && /^[A-Z]/.test(file)) {
            results = results.concat(walk(filepath));
        } else {
            if (path.extname(filepath) === '.elm') {
                results.push(filepath);
            }
        }
    });
    return results;
}

function loadFile(filename) {
    var file = "";
    try {
        file = fs.readFileSync(filename, 'utf8');
    } catch (err) {
        console.log([{error:err.message}]);
        process.exit(1);
    }

    return file;
}
